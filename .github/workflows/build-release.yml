name: Build Releases

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:

permissions:
  contents: read
  actions: read
  checks: read
  statuses: write

jobs:
  build:
    name: Build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: veddb-server.exe
            artifact_name: veddb-server-windows-x86_64
            archive_name: veddb-server-windows-x86_64.zip
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: veddb-server
            artifact_name: veddb-server-linux-x86_64
            archive_name: veddb-server-linux-x86_64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            binary: veddb-server
            artifact_name: veddb-server-macos-arm64
            archive_name: veddb-server-macos-arm64.tar.gz

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo build data
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: true
          cache-on-failure: true

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact directory (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $outDir = "artifacts"
          New-Item -ItemType Directory -Path $outDir -Force | Out-Null
          Copy-Item "target/${{ matrix.target }}/release/${{ matrix.binary }}" "$outDir/${{ matrix.binary }}"
          Compress-Archive -Path "$outDir/${{ matrix.binary }}" -DestinationPath "${{ matrix.archive_name }}" -Force

      - name: Prepare artifact directory (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          set -euo pipefail
          outDir="artifacts"
          mkdir -p "$outDir"
          cp "target/${{ matrix.target }}/release/${{ matrix.binary }}" "$outDir/${{ matrix.binary }}"
          tar -C "$outDir" -czf "${{ matrix.archive_name }}" "${{ matrix.binary }}"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.archive_name }}
          if-no-files-found: error
